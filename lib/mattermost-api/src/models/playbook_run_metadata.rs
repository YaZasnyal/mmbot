/*
 * Mattermost API Reference
 *
 * There is also a work-in-progress [Postman API reference](https://documenter.getpostman.com/view/4508214/RW8FERUn).
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: feedback@mattermost.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PlaybookRunMetadata {
    /// Name of the channel associated to the playbook run.
    #[serde(rename = "channel_name", skip_serializing_if = "Option::is_none")]
    pub channel_name: Option<String>,
    /// Display name of the channel associated to the playbook run.
    #[serde(
        rename = "channel_display_name",
        skip_serializing_if = "Option::is_none"
    )]
    pub channel_display_name: Option<String>,
    /// Name of the team the playbook run is in.
    #[serde(rename = "team_name", skip_serializing_if = "Option::is_none")]
    pub team_name: Option<String>,
    /// Number of users that have been members of the playbook run at any point.
    #[serde(rename = "num_members", skip_serializing_if = "Option::is_none")]
    pub num_members: Option<i64>,
    /// Number of posts in the channel associated to the playbook run.
    #[serde(rename = "total_posts", skip_serializing_if = "Option::is_none")]
    pub total_posts: Option<i64>,
}

impl PlaybookRunMetadata {
    pub fn new() -> PlaybookRunMetadata {
        PlaybookRunMetadata {
            channel_name: None,
            channel_display_name: None,
            team_name: None,
            num_members: None,
            total_posts: None,
        }
    }
}
