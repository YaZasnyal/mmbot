/*
 * Mattermost API Reference
 *
 * There is also a work-in-progress [Postman API reference](https://documenter.getpostman.com/view/4508214/RW8FERUn). 
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: feedback@mattermost.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ChannelBookmarkWithFileInfo {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The time in milliseconds a channel bookmark was created
    #[serde(rename = "create_at", skip_serializing_if = "Option::is_none")]
    pub create_at: Option<i64>,
    /// The time in milliseconds a channel bookmark was last updated
    #[serde(rename = "update_at", skip_serializing_if = "Option::is_none")]
    pub update_at: Option<i64>,
    /// The time in milliseconds a channel bookmark was deleted
    #[serde(rename = "delete_at", skip_serializing_if = "Option::is_none")]
    pub delete_at: Option<i64>,
    #[serde(rename = "channel_id", skip_serializing_if = "Option::is_none")]
    pub channel_id: Option<String>,
    /// The ID of the user that the channel bookmark belongs to
    #[serde(rename = "owner_id", skip_serializing_if = "Option::is_none")]
    pub owner_id: Option<String>,
    /// The ID of the file associated with the channel bookmark
    #[serde(rename = "file_id", skip_serializing_if = "Option::is_none")]
    pub file_id: Option<String>,
    #[serde(rename = "display_name", skip_serializing_if = "Option::is_none")]
    pub display_name: Option<String>,
    /// The order of the channel bookmark
    #[serde(rename = "sort_order", skip_serializing_if = "Option::is_none")]
    pub sort_order: Option<i64>,
    /// The URL associated with the channel bookmark
    #[serde(rename = "link_url", skip_serializing_if = "Option::is_none")]
    pub link_url: Option<String>,
    /// The URL of the image associated with the channel bookmark
    #[serde(rename = "image_url", skip_serializing_if = "Option::is_none")]
    pub image_url: Option<String>,
    #[serde(rename = "emoji", skip_serializing_if = "Option::is_none")]
    pub emoji: Option<String>,
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<Type>,
    /// The ID of the original channel bookmark
    #[serde(rename = "original_id", skip_serializing_if = "Option::is_none")]
    pub original_id: Option<String>,
    /// The ID of the parent channel bookmark
    #[serde(rename = "parent_id", skip_serializing_if = "Option::is_none")]
    pub parent_id: Option<String>,
    #[serde(rename = "file", skip_serializing_if = "Option::is_none")]
    pub file: Option<Box<models::FileInfo>>,
}

impl ChannelBookmarkWithFileInfo {
    pub fn new() -> ChannelBookmarkWithFileInfo {
        ChannelBookmarkWithFileInfo {
            id: None,
            create_at: None,
            update_at: None,
            delete_at: None,
            channel_id: None,
            owner_id: None,
            file_id: None,
            display_name: None,
            sort_order: None,
            link_url: None,
            image_url: None,
            emoji: None,
            r#type: None,
            original_id: None,
            parent_id: None,
            file: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "link")]
    Link,
    #[serde(rename = "file")]
    File,
}

impl Default for Type {
    fn default() -> Type {
        Self::Link
    }
}

