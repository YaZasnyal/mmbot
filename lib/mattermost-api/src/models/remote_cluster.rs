/*
 * Mattermost API Reference
 *
 * There is also a work-in-progress [Postman API reference](https://documenter.getpostman.com/view/4508214/RW8FERUn). 
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: feedback@mattermost.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct RemoteCluster {
    #[serde(rename = "remote_id", skip_serializing_if = "Option::is_none")]
    pub remote_id: Option<String>,
    #[serde(rename = "remote_team_id", skip_serializing_if = "Option::is_none")]
    pub remote_team_id: Option<String>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "display_name", skip_serializing_if = "Option::is_none")]
    pub display_name: Option<String>,
    /// URL of the remote cluster
    #[serde(rename = "site_url", skip_serializing_if = "Option::is_none")]
    pub site_url: Option<String>,
    /// The team where channels from invites are created
    #[serde(rename = "default_team_id", skip_serializing_if = "Option::is_none")]
    pub default_team_id: Option<String>,
    /// Time in milliseconds that the remote cluster was created
    #[serde(rename = "create_at", skip_serializing_if = "Option::is_none")]
    pub create_at: Option<i32>,
    /// Time in milliseconds that the remote cluster record was deleted
    #[serde(rename = "delete_at", skip_serializing_if = "Option::is_none")]
    pub delete_at: Option<i32>,
    /// Time in milliseconds when the last ping to the remote cluster was run
    #[serde(rename = "last_ping_at", skip_serializing_if = "Option::is_none")]
    pub last_ping_at: Option<i32>,
    #[serde(rename = "token", skip_serializing_if = "Option::is_none")]
    pub token: Option<String>,
    #[serde(rename = "remote_token", skip_serializing_if = "Option::is_none")]
    pub remote_token: Option<String>,
    #[serde(rename = "topics", skip_serializing_if = "Option::is_none")]
    pub topics: Option<String>,
    #[serde(rename = "creator_id", skip_serializing_if = "Option::is_none")]
    pub creator_id: Option<String>,
    #[serde(rename = "plugin_id", skip_serializing_if = "Option::is_none")]
    pub plugin_id: Option<String>,
    /// A bitmask with a set of option flags
    #[serde(rename = "options", skip_serializing_if = "Option::is_none")]
    pub options: Option<i32>,
}

impl RemoteCluster {
    pub fn new() -> RemoteCluster {
        RemoteCluster {
            remote_id: None,
            remote_team_id: None,
            name: None,
            display_name: None,
            site_url: None,
            default_team_id: None,
            create_at: None,
            delete_at: None,
            last_ping_at: None,
            token: None,
            remote_token: None,
            topics: None,
            creator_id: None,
            plugin_id: None,
            options: None,
        }
    }
}

