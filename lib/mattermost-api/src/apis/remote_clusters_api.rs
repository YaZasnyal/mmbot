/*
 * Mattermost API Reference
 *
 * There is also a work-in-progress [Postman API reference](https://documenter.getpostman.com/view/4508214/RW8FERUn). 
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: feedback@mattermost.com
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration};


/// struct for typed errors of method [`accept_remote_cluster_invite`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AcceptRemoteClusterInviteError {
    Status401(models::AppError),
    Status403(models::AppError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`create_remote_cluster`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateRemoteClusterError {
    Status400(models::AppError),
    Status401(models::AppError),
    Status403(models::AppError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`delete_remote_cluster`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteRemoteClusterError {
    Status401(models::AppError),
    Status403(models::AppError),
    Status404(models::AppError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_remote_cluster`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetRemoteClusterError {
    Status401(models::AppError),
    Status403(models::AppError),
    Status404(models::AppError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_remote_clusters`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetRemoteClustersError {
    Status401(models::AppError),
    Status403(models::AppError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`patch_remote_cluster`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PatchRemoteClusterError {
    Status401(models::AppError),
    Status403(models::AppError),
    Status404(models::AppError),
    UnknownValue(serde_json::Value),
}


/// Accepts a remote cluster invite code.  ##### Permissions `manage_secure_connections` 
pub async fn accept_remote_cluster_invite(configuration: &configuration::Configuration, accept_remote_cluster_invite_request: Option<models::AcceptRemoteClusterInviteRequest>) -> Result<models::RemoteCluster, Error<AcceptRemoteClusterInviteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v4/remotecluster/accept_invite", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&accept_remote_cluster_invite_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AcceptRemoteClusterInviteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Create a new remote cluster and generate an invite code.  ##### Permissions `manage_secure_connections` 
pub async fn create_remote_cluster(configuration: &configuration::Configuration, create_remote_cluster_request: Option<models::CreateRemoteClusterRequest>) -> Result<models::CreateRemoteCluster201Response, Error<CreateRemoteClusterError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v4/remotecluster", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&create_remote_cluster_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CreateRemoteClusterError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Deletes a Remote Cluster.  ##### Permissions `manage_secure_connections` 
pub async fn delete_remote_cluster(configuration: &configuration::Configuration, remote_id: &str) -> Result<(), Error<DeleteRemoteClusterError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v4/remotecluster/{remote_id}", local_var_configuration.base_path, remote_id=crate::apis::urlencode(remote_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DeleteRemoteClusterError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Get the Remote Cluster details from the provided id string.  ##### Permissions `manage_secure_connections` 
pub async fn get_remote_cluster(configuration: &configuration::Configuration, remote_id: &str) -> Result<models::RemoteCluster, Error<GetRemoteClusterError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v4/remotecluster/{remote_id}", local_var_configuration.base_path, remote_id=crate::apis::urlencode(remote_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetRemoteClusterError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Get a list of remote clusters.  ##### Permissions `manage_secure_connections` 
pub async fn get_remote_clusters(configuration: &configuration::Configuration, page: Option<i32>, per_page: Option<i32>, exclude_offline: Option<bool>, in_channel: Option<&str>, not_in_channel: Option<&str>, only_confirmed: Option<bool>, only_plugins: Option<bool>, exclude_plugins: Option<bool>, include_deleted: Option<bool>) -> Result<Vec<models::RemoteCluster>, Error<GetRemoteClustersError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v4/remotecluster", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = page {
        local_var_req_builder = local_var_req_builder.query(&[("page", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = per_page {
        local_var_req_builder = local_var_req_builder.query(&[("per_page", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = exclude_offline {
        local_var_req_builder = local_var_req_builder.query(&[("exclude_offline", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = in_channel {
        local_var_req_builder = local_var_req_builder.query(&[("in_channel", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = not_in_channel {
        local_var_req_builder = local_var_req_builder.query(&[("not_in_channel", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = only_confirmed {
        local_var_req_builder = local_var_req_builder.query(&[("only_confirmed", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = only_plugins {
        local_var_req_builder = local_var_req_builder.query(&[("only_plugins", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = exclude_plugins {
        local_var_req_builder = local_var_req_builder.query(&[("exclude_plugins", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = include_deleted {
        local_var_req_builder = local_var_req_builder.query(&[("include_deleted", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetRemoteClustersError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Partially update a Remote Cluster by providing only the fields you want to update. Ommited fields will not be updated.  ##### Permissions `manage_secure_connections` 
pub async fn patch_remote_cluster(configuration: &configuration::Configuration, remote_id: &str, patch_remote_cluster_request: Option<models::PatchRemoteClusterRequest>) -> Result<models::RemoteCluster, Error<PatchRemoteClusterError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v4/remotecluster/{remote_id}", local_var_configuration.base_path, remote_id=crate::apis::urlencode(remote_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&patch_remote_cluster_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PatchRemoteClusterError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

