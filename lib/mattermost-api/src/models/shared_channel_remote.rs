/*
 * Mattermost API Reference
 *
 * There is also a work-in-progress [Postman API reference](https://documenter.getpostman.com/view/4508214/RW8FERUn). 
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: feedback@mattermost.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SharedChannelRemote {
    /// The id of the shared channel remote
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The id of the channel
    #[serde(rename = "channel_id", skip_serializing_if = "Option::is_none")]
    pub channel_id: Option<String>,
    /// Id of the user that invited the remote to share the channel
    #[serde(rename = "creator_id", skip_serializing_if = "Option::is_none")]
    pub creator_id: Option<String>,
    /// Time in milliseconds that the remote was invited to the channel
    #[serde(rename = "create_at", skip_serializing_if = "Option::is_none")]
    pub create_at: Option<i32>,
    /// Time in milliseconds that the shared channel remote record was last updated
    #[serde(rename = "update_at", skip_serializing_if = "Option::is_none")]
    pub update_at: Option<i32>,
    /// Time in milliseconds that the shared chanenl remote record was deleted
    #[serde(rename = "delete_at", skip_serializing_if = "Option::is_none")]
    pub delete_at: Option<i32>,
    /// Indicates if the invite has been accepted by the remote
    #[serde(rename = "is_invite_accepted", skip_serializing_if = "Option::is_none", default, deserialize_with = "bool_parser::deserialize_option_bool")]
    pub is_invite_accepted: Option<bool>,
    /// Indicates if the invite has been confirmed by the remote
    #[serde(rename = "is_invite_confirmed", skip_serializing_if = "Option::is_none", default, deserialize_with = "bool_parser::deserialize_option_bool")]
    pub is_invite_confirmed: Option<bool>,
    /// Id of the remote cluster that the channel is shared with
    #[serde(rename = "remote_id", skip_serializing_if = "Option::is_none")]
    pub remote_id: Option<String>,
    /// Time in milliseconds of the last post in the channel that was synchronized with the remote update_at
    #[serde(rename = "last_post_update_at", skip_serializing_if = "Option::is_none")]
    pub last_post_update_at: Option<i32>,
    /// Id of the last post in the channel that was synchronized with the remote
    #[serde(rename = "last_post_id", skip_serializing_if = "Option::is_none")]
    pub last_post_id: Option<String>,
    /// Time in milliseconds of the last post in the channel that was synchronized with the remote create_at
    #[serde(rename = "last_post_create_at", skip_serializing_if = "Option::is_none")]
    pub last_post_create_at: Option<String>,
    #[serde(rename = "last_post_create_id", skip_serializing_if = "Option::is_none")]
    pub last_post_create_id: Option<String>,
}

impl SharedChannelRemote {
    pub fn new() -> SharedChannelRemote {
        SharedChannelRemote {
            id: None,
            channel_id: None,
            creator_id: None,
            create_at: None,
            update_at: None,
            delete_at: None,
            is_invite_accepted: None,
            is_invite_confirmed: None,
            remote_id: None,
            last_post_update_at: None,
            last_post_id: None,
            last_post_create_at: None,
            last_post_create_id: None,
        }
    }
}

